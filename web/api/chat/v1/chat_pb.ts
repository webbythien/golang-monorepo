// @generated by protoc-gen-es v1.9.0 with parameter "target=ts,import_extension=.ts"
// @generated from file api/chat/v1/chat.proto (package api.chat.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message api.chat.v1.UserCreateMeetingRequest
 */
export class UserCreateMeetingRequest extends Message<UserCreateMeetingRequest> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  constructor(data?: PartialMessage<UserCreateMeetingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.chat.v1.UserCreateMeetingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserCreateMeetingRequest {
    return new UserCreateMeetingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserCreateMeetingRequest {
    return new UserCreateMeetingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserCreateMeetingRequest {
    return new UserCreateMeetingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UserCreateMeetingRequest | PlainMessage<UserCreateMeetingRequest> | undefined, b: UserCreateMeetingRequest | PlainMessage<UserCreateMeetingRequest> | undefined): boolean {
    return proto3.util.equals(UserCreateMeetingRequest, a, b);
  }
}

/**
 * @generated from message api.chat.v1.UserCreateMeetingResponse
 */
export class UserCreateMeetingResponse extends Message<UserCreateMeetingResponse> {
  /**
   * @generated from field: string meeting_id = 1;
   */
  meetingId = "";

  constructor(data?: PartialMessage<UserCreateMeetingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.chat.v1.UserCreateMeetingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "meeting_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserCreateMeetingResponse {
    return new UserCreateMeetingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserCreateMeetingResponse {
    return new UserCreateMeetingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserCreateMeetingResponse {
    return new UserCreateMeetingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UserCreateMeetingResponse | PlainMessage<UserCreateMeetingResponse> | undefined, b: UserCreateMeetingResponse | PlainMessage<UserCreateMeetingResponse> | undefined): boolean {
    return proto3.util.equals(UserCreateMeetingResponse, a, b);
  }
}

/**
 * @generated from message api.chat.v1.UserJoinMeetingRequest
 */
export class UserJoinMeetingRequest extends Message<UserJoinMeetingRequest> {
  /**
   * @generated from field: string meeting_id = 1;
   */
  meetingId = "";

  /**
   * @generated from field: string sdp_offer = 2;
   */
  sdpOffer = "";

  constructor(data?: PartialMessage<UserJoinMeetingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.chat.v1.UserJoinMeetingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "meeting_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sdp_offer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserJoinMeetingRequest {
    return new UserJoinMeetingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserJoinMeetingRequest {
    return new UserJoinMeetingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserJoinMeetingRequest {
    return new UserJoinMeetingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UserJoinMeetingRequest | PlainMessage<UserJoinMeetingRequest> | undefined, b: UserJoinMeetingRequest | PlainMessage<UserJoinMeetingRequest> | undefined): boolean {
    return proto3.util.equals(UserJoinMeetingRequest, a, b);
  }
}

/**
 * @generated from message api.chat.v1.UserJoinMeetingResponse
 */
export class UserJoinMeetingResponse extends Message<UserJoinMeetingResponse> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<UserJoinMeetingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.chat.v1.UserJoinMeetingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserJoinMeetingResponse {
    return new UserJoinMeetingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserJoinMeetingResponse {
    return new UserJoinMeetingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserJoinMeetingResponse {
    return new UserJoinMeetingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UserJoinMeetingResponse | PlainMessage<UserJoinMeetingResponse> | undefined, b: UserJoinMeetingResponse | PlainMessage<UserJoinMeetingResponse> | undefined): boolean {
    return proto3.util.equals(UserJoinMeetingResponse, a, b);
  }
}

/**
 * @generated from message api.chat.v1.UserJoinMeeting
 */
export class UserJoinMeeting extends Message<UserJoinMeeting> {
  /**
   * @generated from field: repeated api.chat.v1.Participant participants = 1;
   */
  participants: Participant[] = [];

  constructor(data?: PartialMessage<UserJoinMeeting>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.chat.v1.UserJoinMeeting";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "participants", kind: "message", T: Participant, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserJoinMeeting {
    return new UserJoinMeeting().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserJoinMeeting {
    return new UserJoinMeeting().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserJoinMeeting {
    return new UserJoinMeeting().fromJsonString(jsonString, options);
  }

  static equals(a: UserJoinMeeting | PlainMessage<UserJoinMeeting> | undefined, b: UserJoinMeeting | PlainMessage<UserJoinMeeting> | undefined): boolean {
    return proto3.util.equals(UserJoinMeeting, a, b);
  }
}

/**
 * @generated from message api.chat.v1.Participant
 */
export class Participant extends Message<Participant> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: string role = 2;
   */
  role = "";

  constructor(data?: PartialMessage<Participant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.chat.v1.Participant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Participant {
    return new Participant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Participant {
    return new Participant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Participant {
    return new Participant().fromJsonString(jsonString, options);
  }

  static equals(a: Participant | PlainMessage<Participant> | undefined, b: Participant | PlainMessage<Participant> | undefined): boolean {
    return proto3.util.equals(Participant, a, b);
  }
}

