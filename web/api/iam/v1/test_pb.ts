// @generated by protoc-gen-es v1.9.0 with parameter "target=ts,import_extension=.ts"
// @generated from file api/iam/v1/test.proto (package api.iam.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message api.iam.v1.TestApiGenProtoRequest
 */
export class TestApiGenProtoRequest extends Message<TestApiGenProtoRequest> {
  constructor(data?: PartialMessage<TestApiGenProtoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.iam.v1.TestApiGenProtoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestApiGenProtoRequest {
    return new TestApiGenProtoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestApiGenProtoRequest {
    return new TestApiGenProtoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestApiGenProtoRequest {
    return new TestApiGenProtoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TestApiGenProtoRequest | PlainMessage<TestApiGenProtoRequest> | undefined, b: TestApiGenProtoRequest | PlainMessage<TestApiGenProtoRequest> | undefined): boolean {
    return proto3.util.equals(TestApiGenProtoRequest, a, b);
  }
}

/**
 * @generated from message api.iam.v1.TestApiGenProtoResponse
 */
export class TestApiGenProtoResponse extends Message<TestApiGenProtoResponse> {
  /**
   * @generated from field: string msg = 1;
   */
  msg = "";

  constructor(data?: PartialMessage<TestApiGenProtoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.iam.v1.TestApiGenProtoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestApiGenProtoResponse {
    return new TestApiGenProtoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestApiGenProtoResponse {
    return new TestApiGenProtoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestApiGenProtoResponse {
    return new TestApiGenProtoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TestApiGenProtoResponse | PlainMessage<TestApiGenProtoResponse> | undefined, b: TestApiGenProtoResponse | PlainMessage<TestApiGenProtoResponse> | undefined): boolean {
    return proto3.util.equals(TestApiGenProtoResponse, a, b);
  }
}

