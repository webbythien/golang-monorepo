// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/chat/v1/chat.proto

package chatv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/monorepo/api/chat/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ChatAPIName is the fully-qualified name of the ChatAPI service.
	ChatAPIName = "api.chat.v1.ChatAPI"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ChatAPIUserCreateMeetingProcedure is the fully-qualified name of the ChatAPI's UserCreateMeeting
	// RPC.
	ChatAPIUserCreateMeetingProcedure = "/api.chat.v1.ChatAPI/UserCreateMeeting"
	// ChatAPIUserJoinMeetingProcedure is the fully-qualified name of the ChatAPI's UserJoinMeeting RPC.
	ChatAPIUserJoinMeetingProcedure = "/api.chat.v1.ChatAPI/UserJoinMeeting"
)

// ChatAPIClient is a client for the api.chat.v1.ChatAPI service.
type ChatAPIClient interface {
	UserCreateMeeting(context.Context, *connect.Request[v1.UserCreateMeetingRequest]) (*connect.Response[v1.UserCreateMeetingResponse], error)
	// rpc TestAPI(TestAPIRequest) returns (TestAPIResponse) {} // POST
	//
	//	rpc GetMeeting(GetMeetingRequest) returns (GetMeetingResponse) {
	//	    option idempotency_level = NO_SIDE_EFFECTS;
	//	}
	UserJoinMeeting(context.Context, *connect.Request[v1.UserJoinMeetingRequest]) (*connect.Response[v1.UserJoinMeetingResponse], error)
}

// NewChatAPIClient constructs a client for the api.chat.v1.ChatAPI service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewChatAPIClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ChatAPIClient {
	baseURL = strings.TrimRight(baseURL, "/")
	chatAPIMethods := v1.File_api_chat_v1_chat_proto.Services().ByName("ChatAPI").Methods()
	return &chatAPIClient{
		userCreateMeeting: connect.NewClient[v1.UserCreateMeetingRequest, v1.UserCreateMeetingResponse](
			httpClient,
			baseURL+ChatAPIUserCreateMeetingProcedure,
			connect.WithSchema(chatAPIMethods.ByName("UserCreateMeeting")),
			connect.WithClientOptions(opts...),
		),
		userJoinMeeting: connect.NewClient[v1.UserJoinMeetingRequest, v1.UserJoinMeetingResponse](
			httpClient,
			baseURL+ChatAPIUserJoinMeetingProcedure,
			connect.WithSchema(chatAPIMethods.ByName("UserJoinMeeting")),
			connect.WithClientOptions(opts...),
		),
	}
}

// chatAPIClient implements ChatAPIClient.
type chatAPIClient struct {
	userCreateMeeting *connect.Client[v1.UserCreateMeetingRequest, v1.UserCreateMeetingResponse]
	userJoinMeeting   *connect.Client[v1.UserJoinMeetingRequest, v1.UserJoinMeetingResponse]
}

// UserCreateMeeting calls api.chat.v1.ChatAPI.UserCreateMeeting.
func (c *chatAPIClient) UserCreateMeeting(ctx context.Context, req *connect.Request[v1.UserCreateMeetingRequest]) (*connect.Response[v1.UserCreateMeetingResponse], error) {
	return c.userCreateMeeting.CallUnary(ctx, req)
}

// UserJoinMeeting calls api.chat.v1.ChatAPI.UserJoinMeeting.
func (c *chatAPIClient) UserJoinMeeting(ctx context.Context, req *connect.Request[v1.UserJoinMeetingRequest]) (*connect.Response[v1.UserJoinMeetingResponse], error) {
	return c.userJoinMeeting.CallUnary(ctx, req)
}

// ChatAPIHandler is an implementation of the api.chat.v1.ChatAPI service.
type ChatAPIHandler interface {
	UserCreateMeeting(context.Context, *connect.Request[v1.UserCreateMeetingRequest]) (*connect.Response[v1.UserCreateMeetingResponse], error)
	// rpc TestAPI(TestAPIRequest) returns (TestAPIResponse) {} // POST
	//
	//	rpc GetMeeting(GetMeetingRequest) returns (GetMeetingResponse) {
	//	    option idempotency_level = NO_SIDE_EFFECTS;
	//	}
	UserJoinMeeting(context.Context, *connect.Request[v1.UserJoinMeetingRequest]) (*connect.Response[v1.UserJoinMeetingResponse], error)
}

// NewChatAPIHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewChatAPIHandler(svc ChatAPIHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	chatAPIMethods := v1.File_api_chat_v1_chat_proto.Services().ByName("ChatAPI").Methods()
	chatAPIUserCreateMeetingHandler := connect.NewUnaryHandler(
		ChatAPIUserCreateMeetingProcedure,
		svc.UserCreateMeeting,
		connect.WithSchema(chatAPIMethods.ByName("UserCreateMeeting")),
		connect.WithHandlerOptions(opts...),
	)
	chatAPIUserJoinMeetingHandler := connect.NewUnaryHandler(
		ChatAPIUserJoinMeetingProcedure,
		svc.UserJoinMeeting,
		connect.WithSchema(chatAPIMethods.ByName("UserJoinMeeting")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.chat.v1.ChatAPI/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ChatAPIUserCreateMeetingProcedure:
			chatAPIUserCreateMeetingHandler.ServeHTTP(w, r)
		case ChatAPIUserJoinMeetingProcedure:
			chatAPIUserJoinMeetingHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedChatAPIHandler returns CodeUnimplemented from all methods.
type UnimplementedChatAPIHandler struct{}

func (UnimplementedChatAPIHandler) UserCreateMeeting(context.Context, *connect.Request[v1.UserCreateMeetingRequest]) (*connect.Response[v1.UserCreateMeetingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.chat.v1.ChatAPI.UserCreateMeeting is not implemented"))
}

func (UnimplementedChatAPIHandler) UserJoinMeeting(context.Context, *connect.Request[v1.UserJoinMeetingRequest]) (*connect.Response[v1.UserJoinMeetingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.chat.v1.ChatAPI.UserJoinMeeting is not implemented"))
}
