// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/iam/v1/test.proto

package iamv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/webbythien/monorepo/api/iam/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SecurityTokenAPIName is the fully-qualified name of the SecurityTokenAPI service.
	SecurityTokenAPIName = "api.iam.v1.SecurityTokenAPI"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SecurityTokenAPITestApiGenProtoProcedure is the fully-qualified name of the SecurityTokenAPI's
	// TestApiGenProto RPC.
	SecurityTokenAPITestApiGenProtoProcedure = "/api.iam.v1.SecurityTokenAPI/TestApiGenProto"
)

// SecurityTokenAPIClient is a client for the api.iam.v1.SecurityTokenAPI service.
type SecurityTokenAPIClient interface {
	TestApiGenProto(context.Context, *connect.Request[v1.TestApiGenProtoRequest]) (*connect.Response[v1.TestApiGenProtoResponse], error)
}

// NewSecurityTokenAPIClient constructs a client for the api.iam.v1.SecurityTokenAPI service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSecurityTokenAPIClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SecurityTokenAPIClient {
	baseURL = strings.TrimRight(baseURL, "/")
	securityTokenAPIMethods := v1.File_api_iam_v1_test_proto.Services().ByName("SecurityTokenAPI").Methods()
	return &securityTokenAPIClient{
		testApiGenProto: connect.NewClient[v1.TestApiGenProtoRequest, v1.TestApiGenProtoResponse](
			httpClient,
			baseURL+SecurityTokenAPITestApiGenProtoProcedure,
			connect.WithSchema(securityTokenAPIMethods.ByName("TestApiGenProto")),
			connect.WithClientOptions(opts...),
		),
	}
}

// securityTokenAPIClient implements SecurityTokenAPIClient.
type securityTokenAPIClient struct {
	testApiGenProto *connect.Client[v1.TestApiGenProtoRequest, v1.TestApiGenProtoResponse]
}

// TestApiGenProto calls api.iam.v1.SecurityTokenAPI.TestApiGenProto.
func (c *securityTokenAPIClient) TestApiGenProto(ctx context.Context, req *connect.Request[v1.TestApiGenProtoRequest]) (*connect.Response[v1.TestApiGenProtoResponse], error) {
	return c.testApiGenProto.CallUnary(ctx, req)
}

// SecurityTokenAPIHandler is an implementation of the api.iam.v1.SecurityTokenAPI service.
type SecurityTokenAPIHandler interface {
	TestApiGenProto(context.Context, *connect.Request[v1.TestApiGenProtoRequest]) (*connect.Response[v1.TestApiGenProtoResponse], error)
}

// NewSecurityTokenAPIHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSecurityTokenAPIHandler(svc SecurityTokenAPIHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	securityTokenAPIMethods := v1.File_api_iam_v1_test_proto.Services().ByName("SecurityTokenAPI").Methods()
	securityTokenAPITestApiGenProtoHandler := connect.NewUnaryHandler(
		SecurityTokenAPITestApiGenProtoProcedure,
		svc.TestApiGenProto,
		connect.WithSchema(securityTokenAPIMethods.ByName("TestApiGenProto")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.iam.v1.SecurityTokenAPI/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SecurityTokenAPITestApiGenProtoProcedure:
			securityTokenAPITestApiGenProtoHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSecurityTokenAPIHandler returns CodeUnimplemented from all methods.
type UnimplementedSecurityTokenAPIHandler struct{}

func (UnimplementedSecurityTokenAPIHandler) TestApiGenProto(context.Context, *connect.Request[v1.TestApiGenProtoRequest]) (*connect.Response[v1.TestApiGenProtoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.iam.v1.SecurityTokenAPI.TestApiGenProto is not implemented"))
}
